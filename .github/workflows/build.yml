name: Build and Release

on:
  push:
    paths-ignore:
        - "documentation/**"
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    permissions:
        contents: write
    name: Build and Release
    runs-on: ubuntu-latest
    outputs:
        FAKERCON_VERSION: ${{ steps.FAKERCON_VERSION.outputs.FAKERCON_VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0'

      - name: Get FakeRcon Version
        id: FAKERCON_VERSION
        run: |
            FAKERCON_VERSION=$(grep -oP 'Version\s*=>\s*"\K[^"]*' fakercon.cs)
            echo "FAKERCON_VERSION=$FAKERCON_VERSION" >> $GITHUB_ENV

      - name: Build and Release Artifacts
        run: |
          set -e  # Exit on error

          CSSHARP_VERSION=$(grep -Po '<PackageReference Include="CounterStrikeSharp.API" Version="\K\d+(\.\d+)*' fakercon.csproj)
          echo "Creating FakeRcon base package with version: $FAKERCON_VERSION"

          # Create initial package directory structure
          mkdir -p package/addons/counterstrikesharp/plugins/FakeRcon
          mkdir -p package/addons/counterstrikesharp/configs/plugins/fakercon
          
          dotnet publish -o package/addons/counterstrikesharp/plugins/FakeRcon
          cp -r configs/plugins/fakercon/* package/addons/counterstrikesharp/configs/plugins/fakercon/
          
          cd package && zip -q -r ../FakeRcon-$FAKERCON_VERSION.zip * && cd ..

          echo "Creating package with CounterStrikeSharp (CSSharp) v$CSSHARP_VERSION for Linux"

          cd package/
          echo "Installing CounterStrikeSharp (CSSharp) v$CSSHARP_VERSION"

          rm -rf addons/counterstrikesharp || true

          CSSHARP_LINUX_URL=$(curl -s "https://api.github.com/repos/roflmuffin/CounterStrikeSharp/releases/tags/v$CSSHARP_VERSION" | \
            jq -r --arg ver "1.0.$CSSHARP_VERSION" '.assets[] | select(.name == "counterstrikesharp-with-runtime-linux-" + $ver + ".zip") | .browser_download_url')

          if [[ -z "$CSSHARP_LINUX_URL" ]]; then
            echo "Failed to find Linux CSSHARP download URL for version $CSSHARP_VERSION"
            exit 1
          fi

          echo "Downloading $CSSHARP_LINUX_URL"
          wget -q -O cssharp-linux.zip "$CSSHARP_LINUX_URL"
          unzip -q -o cssharp-linux.zip -d .
          rm cssharp-linux.zip
          cd ..

          dotnet publish -o package/addons/counterstrikesharp/plugins/FakeRcon
          cp -r configs/plugins/fakercon/* package/addons/counterstrikesharp/configs/plugins/fakercon/
          cd package && zip -q -r ../FakeRcon-$FAKERCON_VERSION-with-cssharp-linux.zip * && cd ..

          rm -rf package/*

          echo "Creating package with CounterStrikeSharp (CSSharp) v$CSSHARP_VERSION for Windows"

          mkdir -p package/addons/counterstrikesharp/plugins/FakeRcon
          mkdir -p package/addons/counterstrikesharp/configs/plugins/fakercon
          cp -r configs/plugins/fakercon/* package/addons/counterstrikesharp/configs/plugins/fakercon/
          cd package/

          rm -rf addons/counterstrikesharp || true

          CSSHARP_WINDOWS_URL=$(curl -s "https://api.github.com/repos/roflmuffin/CounterStrikeSharp/releases/tags/v$CSSHARP_VERSION" | \
            jq -r --arg ver "1.0.$CSSHARP_VERSION" '.assets[] | select(.name == "counterstrikesharp-with-runtime-windows-" + $ver + ".zip") | .browser_download_url')

          if [[ -z "$CSSHARP_WINDOWS_URL" ]]; then
            echo "Failed to find Windows CSSHARP download URL for version $CSSHARP_VERSION"
            exit 1
          fi

          echo "Downloading $CSSHARP_WINDOWS_URL"
          wget -q -O cssharp-windows.zip "$CSSHARP_WINDOWS_URL"
          unzip -q -o cssharp-windows.zip -d .
          rm cssharp-windows.zip
          cd ..

          dotnet publish -o package/addons/counterstrikesharp/plugins/FakeRcon
          cd package && zip -q -r ../FakeRcon-$FAKERCON_VERSION-with-cssharp-windows.zip * && cd ..

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: FakeRcon ${{ env.FAKERCON_VERSION }}
          tag_name: ${{ env.FAKERCON_VERSION }}
          body: |
            Installation:
            There are 3 files attached here:
            1. FakeRcon-${{ env.FAKERCON_VERSION }}.zip - Contains only the FakeRcon plugin files
            2. FakeRcon-${{ env.FAKERCON_VERSION }}-with-cssharp-linux.zip - Contains FakeRcon and CounterStrikeSharp files for Linux
            3. FakeRcon-${{ env.FAKERCON_VERSION }}-with-cssharp-windows.zip - Same as above, but for Windows

            Extract the contents to your CS2 server's `csgo` directory.
            Note: Metamod is required for all installations.
          draft: false
          prerelease: false
          files: |
            FakeRcon-${{ env.FAKERCON_VERSION }}.zip
            FakeRcon-${{ env.FAKERCON_VERSION }}-with-cssharp-linux.zip
            FakeRcon-${{ env.FAKERCON_VERSION }}-with-cssharp-windows.zip
